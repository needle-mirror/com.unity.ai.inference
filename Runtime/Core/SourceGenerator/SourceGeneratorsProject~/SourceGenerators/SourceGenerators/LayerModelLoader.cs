using System;
using System.CodeDom.Compiler;
using System.Collections.Immutable;
using System.IO;
using System.Text;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.Text;

namespace SourceGenerators
{
    public static class LayerModelLoader
    {
        public static void GenerateModelLoader(SourceProductionContext spc, ImmutableArray<INamedTypeSymbol> classSymbols)
        {
            // TODO fix hack to prevent multiple model loader classes being created in different assemblies
            if (classSymbols[0].ContainingNamespace.ToString() != "Unity.InferenceEngine.Layers")
                return;

            MemoryStream sourceStream = new();
            StreamWriter sourceStreamWriter = new(sourceStream, Encoding.UTF8);
            IndentedTextWriter codeWriter = new(sourceStreamWriter);

            codeWriter.WriteLine("// <auto-generated/>");
            codeWriter.WriteLine("using SentisFlatBuffer;");
            codeWriter.WriteLine("using Unity.InferenceEngine.Layers;");
            codeWriter.WriteLine();
            codeWriter.WriteLine("namespace Unity.InferenceEngine");
            codeWriter.WriteLine('{');
            codeWriter.Indent++;
            codeWriter.WriteLine("static class LayerModelLoader");
            codeWriter.WriteLine('{');
            codeWriter.Indent++;
            codeWriter.WriteLine("public static Layer DeserializeLayer(string kernelName, Chain chain, ExecutionPlan executionPlan)");
            codeWriter.WriteLine('{');
            codeWriter.Indent++;

            for (var i = 0; i < classSymbols.Length; i++)
            {
                var classSymbol = classSymbols[i];
                codeWriter.WriteLine($"if (kernelName == \"{classSymbol.Name}\")");
                codeWriter.Indent++;
                codeWriter.WriteLine($"return {classSymbol.Name}.DeserializeLayer(chain, executionPlan);");
                codeWriter.Indent--;
            }

            codeWriter.WriteLine("return null;");

            codeWriter.Indent--;
            codeWriter.WriteLine('}');
            codeWriter.Indent--;
            codeWriter.WriteLine('}');
            codeWriter.Indent--;
            codeWriter.WriteLine('}');
            codeWriter.WriteLine();

            sourceStreamWriter.Flush();
            spc.AddSource("LayerModelLoader.g.cs", SourceText.From(sourceStream, Encoding.UTF8, canBeEmbedded: true));
        }
    }
}
