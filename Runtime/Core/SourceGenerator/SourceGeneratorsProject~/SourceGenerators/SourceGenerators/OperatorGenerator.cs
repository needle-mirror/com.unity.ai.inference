using System;
using System.CodeDom.Compiler;
using System.Collections.Immutable;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.Text;
using System.IO;
using System.Text;
using SourceGenerators;

[Generator]
public class AttributeBasedFieldGenerator : IIncrementalGenerator
{
    public void Initialize(IncrementalGeneratorInitializationContext context)
    {
        // filter for class declarations with the 'Operator' attribute
        var classDeclarations = context.SyntaxProvider
            .CreateSyntaxProvider(
                predicate: static (node, _) => node is ClassDeclarationSyntax,
                transform: static (ctx, _) => OperatorUtilities.GetClassWithAttribute(ctx, "Operator"))
            .Where(static cls => cls is not null)
            .Select((cls, _) => cls!)
            .Collect();

        context.RegisterSourceOutput(classDeclarations, GenerateLayerClasses);
        context.RegisterSourceOutput(classDeclarations, LayerModelLoader.GenerateModelLoader);
    }

    // generate the Layer.g.cs file with the partial layer classes with the generated methods for all the ops
    void GenerateLayerClasses(SourceProductionContext spc, ImmutableArray<INamedTypeSymbol> classSymbols)
    {
        using MemoryStream sourceStream = new();
        using StreamWriter sourceStreamWriter = new(sourceStream, Encoding.UTF8);
        using IndentedTextWriter codeWriter = new(sourceStreamWriter);

        codeWriter.WriteLine("// <auto-generated/>");
        codeWriter.WriteLine("using System;");
        codeWriter.WriteLine("using System.Collections;");
        codeWriter.WriteLine("using Unity.Profiling;");
        codeWriter.WriteLine("using System.Collections.Generic;");
        codeWriter.WriteLine("using SentisFlatBuffer;");
        codeWriter.WriteLine("using Unity.InferenceEngine.Google.FlatBuffers;");
        codeWriter.WriteLine("using UnityEngine;");
        codeWriter.WriteLine();
        codeWriter.WriteLine("namespace Unity.InferenceEngine.Layers");
        codeWriter.WriteLine('{');
        codeWriter.Indent++;

        foreach (var classSymbol in classSymbols)
        {
            var opDef = new OpDef(classSymbol);

            opDef.OpenClass(codeWriter, false);

            opDef.WriteConstructor(codeWriter);
            codeWriter.WriteLine();

            opDef.WriteGetInputNames(codeWriter);
            codeWriter.WriteLine();

            opDef.WriteSetInputs(codeWriter);
            codeWriter.WriteLine();

            opDef.WriteGetOutputNames(codeWriter);
            codeWriter.WriteLine();

            opDef.WriteSetOutputs(codeWriter);
            codeWriter.WriteLine();

            opDef.WriteOpName(codeWriter);
            codeWriter.WriteLine();

            opDef.WriteCategory(codeWriter);
            codeWriter.WriteLine();

            opDef.WriteProfilerMarker(codeWriter);
            codeWriter.WriteLine();

            opDef.WriteIsEquivalent(codeWriter);
            codeWriter.WriteLine();

            opDef.WriteGetHashCode(codeWriter);
            codeWriter.WriteLine();

            opDef.WriteToString(codeWriter);
            codeWriter.WriteLine();

            opDef.WriteSerializeFields(codeWriter);
            codeWriter.WriteLine();

            opDef.WriteDeserializeLayer(codeWriter);

            opDef.CloseClass(codeWriter);
            codeWriter.WriteLine();
        }

        codeWriter.Indent--;
        codeWriter.WriteLine('}');
        codeWriter.WriteLine();

        sourceStreamWriter.Flush();
        spc.AddSource("Layers.g.cs", SourceText.From(sourceStream, Encoding.UTF8, canBeEmbedded: true));
    }
}

